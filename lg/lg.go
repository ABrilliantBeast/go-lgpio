// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 13 Aug 2025 17:09:29 BST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package lg

/*
#cgo LDFLAGS: -llgpio
#include <lgpio.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// LguGetConfigDir function as declared in lggo/lgpio.h:429
func LguGetConfigDir() *byte {
	__ret := C.lguGetConfigDir()
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// LguSetConfigDir function as declared in lggo/lgpio.h:430
func LguSetConfigDir(dirPath string) {
	cdirPath, cdirPathAllocMap := unpackPCharString(dirPath)
	C.lguSetConfigDir(cdirPath)
	runtime.KeepAlive(cdirPathAllocMap)
}

// LgGpioSetBannedState function as declared in lggo/lgpio.h:431
func LgGpioSetBannedState(handle int32, gpio int32, banned int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	cbanned, cbannedAllocMap := (C.int)(banned), cgoAllocsUnknown
	__ret := C.lgGpioSetBannedState(chandle, cgpio, cbanned)
	runtime.KeepAlive(cbannedAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpiochipOpen function as declared in lggo/lgpio.h:437
func LgGpiochipOpen(gpioDev int32) int32 {
	cgpioDev, cgpioDevAllocMap := (C.int)(gpioDev), cgoAllocsUnknown
	__ret := C.lgGpiochipOpen(cgpioDev)
	runtime.KeepAlive(cgpioDevAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpiochipClose function as declared in lggo/lgpio.h:464
func LgGpiochipClose(handle int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	__ret := C.lgGpiochipClose(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpioGetChipInfo function as declared in lggo/lgpio.h:487
func LgGpioGetChipInfo(handle int32, chipInfo *LgChipInfo) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cchipInfo, cchipInfoAllocMap := chipInfo.PassRef()
	__ret := C.lgGpioGetChipInfo(chandle, cchipInfo)
	runtime.KeepAlive(cchipInfoAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpioGetLineInfo function as declared in lggo/lgpio.h:518
func LgGpioGetLineInfo(handle int32, gpio int32, lineInfo *LgLineInfo) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	clineInfo, clineInfoAllocMap := lineInfo.PassRef()
	__ret := C.lgGpioGetLineInfo(chandle, cgpio, clineInfo)
	runtime.KeepAlive(clineInfoAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpioGetMode function as declared in lggo/lgpio.h:555
func LgGpioGetMode(handle int32, gpio int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	__ret := C.lgGpioGetMode(chandle, cgpio)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpioSetUser function as declared in lggo/lgpio.h:596
func LgGpioSetUser(handle int32, gpiouser string) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpiouser, cgpiouserAllocMap := unpackPCharString(gpiouser)
	__ret := C.lgGpioSetUser(chandle, cgpiouser)
	runtime.KeepAlive(cgpiouserAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpioClaimInput function as declared in lggo/lgpio.h:616
func LgGpioClaimInput(handle int32, lFlags int32, gpio int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	clFlags, clFlagsAllocMap := (C.int)(lFlags), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	__ret := C.lgGpioClaimInput(chandle, clFlags, cgpio)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(clFlagsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpioClaimOutput function as declared in lggo/lgpio.h:641
func LgGpioClaimOutput(handle int32, lFlags int32, gpio int32, level int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	clFlags, clFlagsAllocMap := (C.int)(lFlags), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	clevel, clevelAllocMap := (C.int)(level), cgoAllocsUnknown
	__ret := C.lgGpioClaimOutput(chandle, clFlags, cgpio, clevel)
	runtime.KeepAlive(clevelAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(clFlagsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpioClaimAlert function as declared in lggo/lgpio.h:669
func LgGpioClaimAlert(handle int32, lFlags int32, eFlags int32, gpio int32, nfyHandle int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	clFlags, clFlagsAllocMap := (C.int)(lFlags), cgoAllocsUnknown
	ceFlags, ceFlagsAllocMap := (C.int)(eFlags), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	cnfyHandle, cnfyHandleAllocMap := (C.int)(nfyHandle), cgoAllocsUnknown
	__ret := C.lgGpioClaimAlert(chandle, clFlags, ceFlags, cgpio, cnfyHandle)
	runtime.KeepAlive(cnfyHandleAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(ceFlagsAllocMap)
	runtime.KeepAlive(clFlagsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpioFree function as declared in lggo/lgpio.h:707
func LgGpioFree(handle int32, gpio int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	__ret := C.lgGpioFree(chandle, cgpio)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGroupClaimInput function as declared in lggo/lgpio.h:729
func LgGroupClaimInput(handle int32, lFlags int32, count int32, gpios []int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	clFlags, clFlagsAllocMap := (C.int)(lFlags), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	cgpios, cgpiosAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&gpios)).Data)), cgoAllocsUnknown
	__ret := C.lgGroupClaimInput(chandle, clFlags, ccount, cgpios)
	runtime.KeepAlive(cgpiosAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(clFlagsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGroupClaimOutput function as declared in lggo/lgpio.h:769
func LgGroupClaimOutput(handle int32, lFlags int32, count int32, gpios []int32, levels []int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	clFlags, clFlagsAllocMap := (C.int)(lFlags), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	cgpios, cgpiosAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&gpios)).Data)), cgoAllocsUnknown
	clevels, clevelsAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&levels)).Data)), cgoAllocsUnknown
	__ret := C.lgGroupClaimOutput(chandle, clFlags, ccount, cgpios, clevels)
	runtime.KeepAlive(clevelsAllocMap)
	runtime.KeepAlive(cgpiosAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(clFlagsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGroupFree function as declared in lggo/lgpio.h:814
func LgGroupFree(handle int32, gpio int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	__ret := C.lgGroupFree(chandle, cgpio)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpioRead function as declared in lggo/lgpio.h:836
func LgGpioRead(handle int32, gpio int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	__ret := C.lgGpioRead(chandle, cgpio)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpioWrite function as declared in lggo/lgpio.h:860
func LgGpioWrite(handle int32, gpio int32, level int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	clevel, clevelAllocMap := (C.int)(level), cgoAllocsUnknown
	__ret := C.lgGpioWrite(chandle, cgpio, clevel)
	runtime.KeepAlive(clevelAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGroupRead function as declared in lggo/lgpio.h:887
func LgGroupRead(handle int32, gpio int32, groupBits *uint64) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	cgroupBits, cgroupBitsAllocMap := (*C.uint64_t)(unsafe.Pointer(groupBits)), cgoAllocsUnknown
	__ret := C.lgGroupRead(chandle, cgpio, cgroupBits)
	runtime.KeepAlive(cgroupBitsAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGroupWrite function as declared in lggo/lgpio.h:937
func LgGroupWrite(handle int32, gpio int32, groupBits uint64, groupMask uint64) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	cgroupBits, cgroupBitsAllocMap := (C.uint64_t)(groupBits), cgoAllocsUnknown
	cgroupMask, cgroupMaskAllocMap := (C.uint64_t)(groupMask), cgoAllocsUnknown
	__ret := C.lgGroupWrite(chandle, cgpio, cgroupBits, cgroupMask)
	runtime.KeepAlive(cgroupMaskAllocMap)
	runtime.KeepAlive(cgroupBitsAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgTxPulse function as declared in lggo/lgpio.h:982
func LgTxPulse(handle int32, gpio int32, pulseOn int32, pulseOff int32, pulseOffset int32, pulseCycles int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	cpulseOn, cpulseOnAllocMap := (C.int)(pulseOn), cgoAllocsUnknown
	cpulseOff, cpulseOffAllocMap := (C.int)(pulseOff), cgoAllocsUnknown
	cpulseOffset, cpulseOffsetAllocMap := (C.int)(pulseOffset), cgoAllocsUnknown
	cpulseCycles, cpulseCyclesAllocMap := (C.int)(pulseCycles), cgoAllocsUnknown
	__ret := C.lgTxPulse(chandle, cgpio, cpulseOn, cpulseOff, cpulseOffset, cpulseCycles)
	runtime.KeepAlive(cpulseCyclesAllocMap)
	runtime.KeepAlive(cpulseOffsetAllocMap)
	runtime.KeepAlive(cpulseOffAllocMap)
	runtime.KeepAlive(cpulseOnAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgTxPwm function as declared in lggo/lgpio.h:1049
func LgTxPwm(handle int32, gpio int32, pwmFrequency float32, pwmDutyCycle float32, pwmOffset int32, pwmCycles int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	cpwmFrequency, cpwmFrequencyAllocMap := (C.float)(pwmFrequency), cgoAllocsUnknown
	cpwmDutyCycle, cpwmDutyCycleAllocMap := (C.float)(pwmDutyCycle), cgoAllocsUnknown
	cpwmOffset, cpwmOffsetAllocMap := (C.int)(pwmOffset), cgoAllocsUnknown
	cpwmCycles, cpwmCyclesAllocMap := (C.int)(pwmCycles), cgoAllocsUnknown
	__ret := C.lgTxPwm(chandle, cgpio, cpwmFrequency, cpwmDutyCycle, cpwmOffset, cpwmCycles)
	runtime.KeepAlive(cpwmCyclesAllocMap)
	runtime.KeepAlive(cpwmOffsetAllocMap)
	runtime.KeepAlive(cpwmDutyCycleAllocMap)
	runtime.KeepAlive(cpwmFrequencyAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgTxServo function as declared in lggo/lgpio.h:1087
func LgTxServo(handle int32, gpio int32, pulseWidth int32, servoFrequency int32, servoOffset int32, servoCycles int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	cpulseWidth, cpulseWidthAllocMap := (C.int)(pulseWidth), cgoAllocsUnknown
	cservoFrequency, cservoFrequencyAllocMap := (C.int)(servoFrequency), cgoAllocsUnknown
	cservoOffset, cservoOffsetAllocMap := (C.int)(servoOffset), cgoAllocsUnknown
	cservoCycles, cservoCyclesAllocMap := (C.int)(servoCycles), cgoAllocsUnknown
	__ret := C.lgTxServo(chandle, cgpio, cpulseWidth, cservoFrequency, cservoOffset, cservoCycles)
	runtime.KeepAlive(cservoCyclesAllocMap)
	runtime.KeepAlive(cservoOffsetAllocMap)
	runtime.KeepAlive(cservoFrequencyAllocMap)
	runtime.KeepAlive(cpulseWidthAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgTxWave function as declared in lggo/lgpio.h:1128
func LgTxWave(handle int32, gpio int32, count int32, pulses []LgPulse) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	cpulses, cpulsesAllocMap := unpackArgSLgPulse(pulses)
	__ret := C.lgTxWave(chandle, cgpio, ccount, cpulses)
	packSLgPulse(pulses, cpulses)
	runtime.KeepAlive(cpulsesAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgTxBusy function as declared in lggo/lgpio.h:1210
func LgTxBusy(handle int32, gpio int32, kind int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.int)(kind), cgoAllocsUnknown
	__ret := C.lgTxBusy(chandle, cgpio, ckind)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgTxRoom function as declared in lggo/lgpio.h:1232
func LgTxRoom(handle int32, gpio int32, kind int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.int)(kind), cgoAllocsUnknown
	__ret := C.lgTxRoom(chandle, cgpio, ckind)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpioSetDebounce function as declared in lggo/lgpio.h:1256
func LgGpioSetDebounce(handle int32, gpio int32, debounce_us int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	cdebounce_us, cdebounce_usAllocMap := (C.int)(debounce_us), cgoAllocsUnknown
	__ret := C.lgGpioSetDebounce(chandle, cgpio, cdebounce_us)
	runtime.KeepAlive(cdebounce_usAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgGpioSetWatchdog function as declared in lggo/lgpio.h:1292
func LgGpioSetWatchdog(handle int32, gpio int32, watchdog_us int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cgpio, cgpioAllocMap := (C.int)(gpio), cgoAllocsUnknown
	cwatchdog_us, cwatchdog_usAllocMap := (C.int)(watchdog_us), cgoAllocsUnknown
	__ret := C.lgGpioSetWatchdog(chandle, cgpio, cwatchdog_us)
	runtime.KeepAlive(cwatchdog_usAllocMap)
	runtime.KeepAlive(cgpioAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgNotifyCloseOrphans function as declared in lggo/lgpio.h:1476
func LgNotifyCloseOrphans(slot int32, fd int32) {
	cslot, cslotAllocMap := (C.int)(slot), cgoAllocsUnknown
	cfd, cfdAllocMap := (C.int)(fd), cgoAllocsUnknown
	C.lgNotifyCloseOrphans(cslot, cfd)
	runtime.KeepAlive(cfdAllocMap)
	runtime.KeepAlive(cslotAllocMap)
}

// LgNotifyOpenWithSize function as declared in lggo/lgpio.h:1477
func LgNotifyOpenWithSize(pipeSize int32) int32 {
	cpipeSize, cpipeSizeAllocMap := (C.int)(pipeSize), cgoAllocsUnknown
	__ret := C.lgNotifyOpenWithSize(cpipeSize)
	runtime.KeepAlive(cpipeSizeAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgNotifyOpenInBand function as declared in lggo/lgpio.h:1479
func LgNotifyOpenInBand(fd int32) int32 {
	cfd, cfdAllocMap := (C.int)(fd), cgoAllocsUnknown
	__ret := C.lgNotifyOpenInBand(cfd)
	runtime.KeepAlive(cfdAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgNotifyOpen function as declared in lggo/lgpio.h:1482
func LgNotifyOpen() int32 {
	__ret := C.lgNotifyOpen()
	__v := (int32)(__ret)
	return __v
}

// LgNotifyResume function as declared in lggo/lgpio.h:1531
func LgNotifyResume(handle int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	__ret := C.lgNotifyResume(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgNotifyPause function as declared in lggo/lgpio.h:1581
func LgNotifyPause(handle int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	__ret := C.lgNotifyPause(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgNotifyClose function as declared in lggo/lgpio.h:1602
func LgNotifyClose(handle int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	__ret := C.lgNotifyClose(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cOpen function as declared in lggo/lgpio.h:1624
func LgI2cOpen(i2cDev int32, i2cAddr int32, i2cFlags int32) int32 {
	ci2cDev, ci2cDevAllocMap := (C.int)(i2cDev), cgoAllocsUnknown
	ci2cAddr, ci2cAddrAllocMap := (C.int)(i2cAddr), cgoAllocsUnknown
	ci2cFlags, ci2cFlagsAllocMap := (C.int)(i2cFlags), cgoAllocsUnknown
	__ret := C.lgI2cOpen(ci2cDev, ci2cAddr, ci2cFlags)
	runtime.KeepAlive(ci2cFlagsAllocMap)
	runtime.KeepAlive(ci2cAddrAllocMap)
	runtime.KeepAlive(ci2cDevAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cClose function as declared in lggo/lgpio.h:1659
func LgI2cClose(handle int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	__ret := C.lgI2cClose(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cWriteQuick function as declared in lggo/lgpio.h:1674
func LgI2cWriteQuick(handle int32, bitVal int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cbitVal, cbitValAllocMap := (C.int)(bitVal), cgoAllocsUnknown
	__ret := C.lgI2cWriteQuick(chandle, cbitVal)
	runtime.KeepAlive(cbitValAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cWriteByte function as declared in lggo/lgpio.h:1695
func LgI2cWriteByte(handle int32, byteVal int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cbyteVal, cbyteValAllocMap := (C.int)(byteVal), cgoAllocsUnknown
	__ret := C.lgI2cWriteByte(chandle, cbyteVal)
	runtime.KeepAlive(cbyteValAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cReadByte function as declared in lggo/lgpio.h:1716
func LgI2cReadByte(handle int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	__ret := C.lgI2cReadByte(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cWriteByteData function as declared in lggo/lgpio.h:1736
func LgI2cWriteByteData(handle int32, i2cReg int32, byteVal int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ci2cReg, ci2cRegAllocMap := (C.int)(i2cReg), cgoAllocsUnknown
	cbyteVal, cbyteValAllocMap := (C.int)(byteVal), cgoAllocsUnknown
	__ret := C.lgI2cWriteByteData(chandle, ci2cReg, cbyteVal)
	runtime.KeepAlive(cbyteValAllocMap)
	runtime.KeepAlive(ci2cRegAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cWriteWordData function as declared in lggo/lgpio.h:1758
func LgI2cWriteWordData(handle int32, i2cReg int32, wordVal int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ci2cReg, ci2cRegAllocMap := (C.int)(i2cReg), cgoAllocsUnknown
	cwordVal, cwordValAllocMap := (C.int)(wordVal), cgoAllocsUnknown
	__ret := C.lgI2cWriteWordData(chandle, ci2cReg, cwordVal)
	runtime.KeepAlive(cwordValAllocMap)
	runtime.KeepAlive(ci2cRegAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cReadByteData function as declared in lggo/lgpio.h:1780
func LgI2cReadByteData(handle int32, i2cReg int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ci2cReg, ci2cRegAllocMap := (C.int)(i2cReg), cgoAllocsUnknown
	__ret := C.lgI2cReadByteData(chandle, ci2cReg)
	runtime.KeepAlive(ci2cRegAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cReadWordData function as declared in lggo/lgpio.h:1801
func LgI2cReadWordData(handle int32, i2cReg int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ci2cReg, ci2cRegAllocMap := (C.int)(i2cReg), cgoAllocsUnknown
	__ret := C.lgI2cReadWordData(chandle, ci2cReg)
	runtime.KeepAlive(ci2cRegAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cProcessCall function as declared in lggo/lgpio.h:1822
func LgI2cProcessCall(handle int32, i2cReg int32, wordVal int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ci2cReg, ci2cRegAllocMap := (C.int)(i2cReg), cgoAllocsUnknown
	cwordVal, cwordValAllocMap := (C.int)(wordVal), cgoAllocsUnknown
	__ret := C.lgI2cProcessCall(chandle, ci2cReg, cwordVal)
	runtime.KeepAlive(cwordValAllocMap)
	runtime.KeepAlive(ci2cRegAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cWriteBlockData function as declared in lggo/lgpio.h:1846
func LgI2cWriteBlockData(handle int32, i2cReg int32, txBuf string, count int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ci2cReg, ci2cRegAllocMap := (C.int)(i2cReg), cgoAllocsUnknown
	ctxBuf, ctxBufAllocMap := unpackPCharString(txBuf)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lgI2cWriteBlockData(chandle, ci2cReg, ctxBuf, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(ctxBufAllocMap)
	runtime.KeepAlive(ci2cRegAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cReadBlockData function as declared in lggo/lgpio.h:1870
func LgI2cReadBlockData(handle int32, i2cReg int32, rxBuf []byte) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ci2cReg, ci2cRegAllocMap := (C.int)(i2cReg), cgoAllocsUnknown
	crxBuf, crxBufAllocMap := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rxBuf)).Data)), cgoAllocsUnknown
	__ret := C.lgI2cReadBlockData(chandle, ci2cReg, crxBuf)
	runtime.KeepAlive(crxBufAllocMap)
	runtime.KeepAlive(ci2cRegAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cBlockProcessCall function as declared in lggo/lgpio.h:1896
func LgI2cBlockProcessCall(handle int32, i2cReg int32, ioBuf []byte, count int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ci2cReg, ci2cRegAllocMap := (C.int)(i2cReg), cgoAllocsUnknown
	cioBuf, cioBufAllocMap := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ioBuf)).Data)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lgI2cBlockProcessCall(chandle, ci2cReg, cioBuf, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cioBufAllocMap)
	runtime.KeepAlive(ci2cRegAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cReadI2CBlockData function as declared in lggo/lgpio.h:1926
func LgI2cReadI2CBlockData(handle int32, i2cReg int32, rxBuf []byte, count int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ci2cReg, ci2cRegAllocMap := (C.int)(i2cReg), cgoAllocsUnknown
	crxBuf, crxBufAllocMap := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rxBuf)).Data)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lgI2cReadI2CBlockData(chandle, ci2cReg, crxBuf, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(crxBufAllocMap)
	runtime.KeepAlive(ci2cRegAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cWriteI2CBlockData function as declared in lggo/lgpio.h:1950
func LgI2cWriteI2CBlockData(handle int32, i2cReg int32, txBuf string, count int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ci2cReg, ci2cRegAllocMap := (C.int)(i2cReg), cgoAllocsUnknown
	ctxBuf, ctxBufAllocMap := unpackPCharString(txBuf)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lgI2cWriteI2CBlockData(chandle, ci2cReg, ctxBuf, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(ctxBufAllocMap)
	runtime.KeepAlive(ci2cRegAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cReadDevice function as declared in lggo/lgpio.h:1971
func LgI2cReadDevice(handle int32, rxBuf []byte, count int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	crxBuf, crxBufAllocMap := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rxBuf)).Data)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lgI2cReadDevice(chandle, crxBuf, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(crxBufAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cWriteDevice function as declared in lggo/lgpio.h:1992
func LgI2cWriteDevice(handle int32, txBuf string, count int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ctxBuf, ctxBufAllocMap := unpackPCharString(txBuf)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lgI2cWriteDevice(chandle, ctxBuf, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(ctxBufAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cSegments function as declared in lggo/lgpio.h:2012
func LgI2cSegments(handle int32, segs []LgI2cMsg, count int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	csegs, csegsAllocMap := unpackArgSLgI2cMsg(segs)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lgI2cSegments(chandle, csegs, ccount)
	runtime.KeepAlive(ccountAllocMap)
	packSLgI2cMsg(segs, csegs)
	runtime.KeepAlive(csegsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgI2cZip function as declared in lggo/lgpio.h:2029
func LgI2cZip(handle int32, txBuf string, txCount int32, rxBuf []byte, rxCount int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ctxBuf, ctxBufAllocMap := unpackPCharString(txBuf)
	ctxCount, ctxCountAllocMap := (C.int)(txCount), cgoAllocsUnknown
	crxBuf, crxBufAllocMap := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rxBuf)).Data)), cgoAllocsUnknown
	crxCount, crxCountAllocMap := (C.int)(rxCount), cgoAllocsUnknown
	__ret := C.lgI2cZip(chandle, ctxBuf, ctxCount, crxBuf, crxCount)
	runtime.KeepAlive(crxCountAllocMap)
	runtime.KeepAlive(crxBufAllocMap)
	runtime.KeepAlive(ctxCountAllocMap)
	runtime.KeepAlive(ctxBufAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgSerialOpen function as declared in lggo/lgpio.h:2086
func LgSerialOpen(serDev string, serBaud int32, serFlags int32) int32 {
	cserDev, cserDevAllocMap := unpackPCharString(serDev)
	cserBaud, cserBaudAllocMap := (C.int)(serBaud), cgoAllocsUnknown
	cserFlags, cserFlagsAllocMap := (C.int)(serFlags), cgoAllocsUnknown
	__ret := C.lgSerialOpen(cserDev, cserBaud, cserFlags)
	runtime.KeepAlive(cserFlagsAllocMap)
	runtime.KeepAlive(cserBaudAllocMap)
	runtime.KeepAlive(cserDevAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgSerialClose function as declared in lggo/lgpio.h:2110
func LgSerialClose(handle int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	__ret := C.lgSerialClose(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgSerialWriteByte function as declared in lggo/lgpio.h:2124
func LgSerialWriteByte(handle int32, byteVal int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	cbyteVal, cbyteValAllocMap := (C.int)(byteVal), cgoAllocsUnknown
	__ret := C.lgSerialWriteByte(chandle, cbyteVal)
	runtime.KeepAlive(cbyteValAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgSerialReadByte function as declared in lggo/lgpio.h:2139
func LgSerialReadByte(handle int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	__ret := C.lgSerialReadByte(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgSerialWrite function as declared in lggo/lgpio.h:2153
func LgSerialWrite(handle int32, txBuf string, count int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ctxBuf, ctxBufAllocMap := unpackPCharString(txBuf)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lgSerialWrite(chandle, ctxBuf, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(ctxBufAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgSerialRead function as declared in lggo/lgpio.h:2170
func LgSerialRead(handle int32, rxBuf []byte, count int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	crxBuf, crxBufAllocMap := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rxBuf)).Data)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lgSerialRead(chandle, crxBuf, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(crxBufAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgSerialDataAvailable function as declared in lggo/lgpio.h:2189
func LgSerialDataAvailable(handle int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	__ret := C.lgSerialDataAvailable(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgSpiOpen function as declared in lggo/lgpio.h:2207
func LgSpiOpen(spiDev int32, spiChan int32, spiBaud int32, spiFlags int32) int32 {
	cspiDev, cspiDevAllocMap := (C.int)(spiDev), cgoAllocsUnknown
	cspiChan, cspiChanAllocMap := (C.int)(spiChan), cgoAllocsUnknown
	cspiBaud, cspiBaudAllocMap := (C.int)(spiBaud), cgoAllocsUnknown
	cspiFlags, cspiFlagsAllocMap := (C.int)(spiFlags), cgoAllocsUnknown
	__ret := C.lgSpiOpen(cspiDev, cspiChan, cspiBaud, cspiFlags)
	runtime.KeepAlive(cspiFlagsAllocMap)
	runtime.KeepAlive(cspiBaudAllocMap)
	runtime.KeepAlive(cspiChanAllocMap)
	runtime.KeepAlive(cspiDevAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgSpiClose function as declared in lggo/lgpio.h:2245
func LgSpiClose(handle int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	__ret := C.lgSpiClose(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgSpiRead function as declared in lggo/lgpio.h:2260
func LgSpiRead(handle int32, rxBuf []byte, count int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	crxBuf, crxBufAllocMap := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rxBuf)).Data)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lgSpiRead(chandle, crxBuf, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(crxBufAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgSpiWrite function as declared in lggo/lgpio.h:2278
func LgSpiWrite(handle int32, txBuf string, count int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ctxBuf, ctxBufAllocMap := unpackPCharString(txBuf)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lgSpiWrite(chandle, ctxBuf, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(ctxBufAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgSpiXfer function as declared in lggo/lgpio.h:2295
func LgSpiXfer(handle int32, txBuf string, rxBuf []byte, count int32) int32 {
	chandle, chandleAllocMap := (C.int)(handle), cgoAllocsUnknown
	ctxBuf, ctxBufAllocMap := unpackPCharString(txBuf)
	crxBuf, crxBufAllocMap := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rxBuf)).Data)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lgSpiXfer(chandle, ctxBuf, crxBuf, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(crxBufAllocMap)
	runtime.KeepAlive(ctxBufAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LgThreadStart function as declared in lggo/lgpio.h:2318
func LgThreadStart(f LgThreadFunc, userdata unsafe.Pointer) *uint64 {
	cf, cfAllocMap := f.PassRef()
	cuserdata, cuserdataAllocMap := userdata, cgoAllocsUnknown
	__ret := C.lgThreadStart(cf, cuserdata)
	runtime.KeepAlive(cuserdataAllocMap)
	runtime.KeepAlive(cfAllocMap)
	__v := *(**uint64)(unsafe.Pointer(&__ret))
	return __v
}

// LgThreadStop function as declared in lggo/lgpio.h:2371
func LgThreadStop(pth *uint64) {
	cpth, cpthAllocMap := (*C.pthread_t)(unsafe.Pointer(pth)), cgoAllocsUnknown
	C.lgThreadStop(cpth)
	runtime.KeepAlive(cpthAllocMap)
}

// LguTimestamp function as declared in lggo/lgpio.h:2385
func LguTimestamp() uint64 {
	__ret := C.lguTimestamp()
	__v := (uint64)(__ret)
	return __v
}

// LguTime function as declared in lggo/lgpio.h:2394
func LguTime() float64 {
	__ret := C.lguTime()
	__v := (float64)(__ret)
	return __v
}

// LguSleep function as declared in lggo/lgpio.h:2403
func LguSleep(sleepSecs float64) {
	csleepSecs, csleepSecsAllocMap := (C.double)(sleepSecs), cgoAllocsUnknown
	C.lguSleep(csleepSecs)
	runtime.KeepAlive(csleepSecsAllocMap)
}

// LguSbcName function as declared in lggo/lgpio.h:2414
func LguSbcName(rxBuf []byte, count int32) int32 {
	crxBuf, crxBufAllocMap := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rxBuf)).Data)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.lguSbcName(crxBuf, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(crxBufAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LguVersion function as declared in lggo/lgpio.h:2430
func LguVersion() int32 {
	__ret := C.lguVersion()
	__v := (int32)(__ret)
	return __v
}

// LguGetInternal function as declared in lggo/lgpio.h:2436
func LguGetInternal(cfgId int32, cfgVal *uint64) int32 {
	ccfgId, ccfgIdAllocMap := (C.int)(cfgId), cgoAllocsUnknown
	ccfgVal, ccfgValAllocMap := (*C.uint64_t)(unsafe.Pointer(cfgVal)), cgoAllocsUnknown
	__ret := C.lguGetInternal(ccfgId, ccfgVal)
	runtime.KeepAlive(ccfgValAllocMap)
	runtime.KeepAlive(ccfgIdAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LguSetInternal function as declared in lggo/lgpio.h:2451
func LguSetInternal(cfgId int32, cfgVal uint64) int32 {
	ccfgId, ccfgIdAllocMap := (C.int)(cfgId), cgoAllocsUnknown
	ccfgVal, ccfgValAllocMap := (C.uint64_t)(cfgVal), cgoAllocsUnknown
	__ret := C.lguSetInternal(ccfgId, ccfgVal)
	runtime.KeepAlive(ccfgValAllocMap)
	runtime.KeepAlive(ccfgIdAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LguErrorText function as declared in lggo/lgpio.h:2466
func LguErrorText(error int32) []byte {
	cerror, cerrorAllocMap := (C.int)(error), cgoAllocsUnknown
	__ret := C.lguErrorText(cerror)
	runtime.KeepAlive(cerrorAllocMap)
	__v := (*(*[0x7fffffff]byte)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// LguSetWorkDir function as declared in lggo/lgpio.h:2476
func LguSetWorkDir(dirPath string) {
	cdirPath, cdirPathAllocMap := unpackPCharString(dirPath)
	C.lguSetWorkDir(cdirPath)
	runtime.KeepAlive(cdirPathAllocMap)
}

// LguGetWorkDir function as declared in lggo/lgpio.h:2492
func LguGetWorkDir() *byte {
	__ret := C.lguGetWorkDir()
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}
